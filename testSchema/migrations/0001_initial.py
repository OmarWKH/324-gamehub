# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-04-16 13:15
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Blogpost',
            fields=[
                ('text', models.TextField(db_column='Text')),
                ('bp_time', models.DateTimeField(db_column='BP_Time')),
                ('is_public', models.IntegerField(db_column='Is_public')),
                ('post_id', models.AutoField(db_column='POST_ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'BLOGPOST',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ChatChannel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cc_name', models.CharField(db_column='CC_Name', max_length=20)),
            ],
            options={
                'db_table': 'CHAT_CHANNEL',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('text', models.TextField(db_column='Text')),
                ('cm_time', models.DateTimeField(db_column='CM_Time')),
                ('cm_id', models.AutoField(db_column='CM_ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'CHAT_MESSAGE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('text', models.TextField(db_column='Text')),
                ('c_time', models.DateTimeField(db_column='C_Time')),
                ('c_id', models.AutoField(db_column='C_ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'COMMENTS',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('game_id', models.AutoField(db_column='GAME_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=20)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('poster', models.TextField(blank=True, db_column='Poster', null=True)),
                ('no_of_players', models.CharField(blank=True, db_column='No_of_players', max_length=20, null=True)),
                ('duration', models.IntegerField(blank=True, db_column='Duration', null=True)),
                ('no_of_sessions', models.CharField(blank=True, db_column='No_of_sessions', max_length=20, null=True)),
                ('age_group', models.CharField(blank=True, db_column='Age_group', max_length=20, null=True)),
                ('competitve_level', models.CharField(blank=True, db_column='Competitve_level', max_length=20, null=True)),
            ],
            options={
                'db_table': 'GAME',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('group_id', models.AutoField(db_column='GROUP_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=20)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('area', models.CharField(db_column='Area', max_length=20)),
                ('is_public', models.IntegerField(db_column='Is_public')),
            ],
            options={
                'db_table': 'GROUPS',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='List',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=20, null=True)),
                ('ownership', models.IntegerField(db_column='Ownership')),
                ('skill', models.CharField(blank=True, db_column='Skill', max_length=20, null=True)),
            ],
            options={
                'db_table': 'LIST',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('os', models.CharField(db_column='OS', max_length=20)),
            ],
            options={
                'db_table': 'PLATFORM',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('report_id', models.AutoField(db_column='REPORT_ID', primary_key=True, serialize=False)),
                ('type', models.CharField(blank=True, db_column='Type', max_length=20, null=True)),
                ('comment', models.TextField(db_column='Comment')),
            ],
            options={
                'db_table': 'REPORTS',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('tag', models.CharField(db_column='TAG', max_length=20)),
            ],
            options={
                'db_table': 'TAG',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('genre', models.CharField(db_column='Genre', max_length=20)),
            ],
            options={
                'db_table': 'TYPE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_id', models.AutoField(db_column='USER_ID', primary_key=True, serialize=False)),
                ('first_name', models.CharField(db_column='first_name', max_length=20)),
                ('last_name', models.CharField(db_column='last_name', max_length=20)),
                ('location', models.CharField(blank=True, db_column='Location', max_length=20, null=True)),
                ('email', models.EmailField(db_column='Email', max_length=20)),
                ('is_public', models.IntegerField(db_column='Is_public', default=1)),
                ('nickname', models.CharField(db_column='Nickname', max_length=20, unique=True)),
                ('password', models.CharField(db_column='Password', max_length=20)),
                ('is_blocked', models.IntegerField(db_column='Is_blocked', default=0)),
                ('is_admin', models.IntegerField(db_column='Is_Admin', default=0)),
                ('is_moderator', models.IntegerField(db_column='Is_Moderator', default=0)),
            ],
            options={
                'db_table': 'USERS',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'USERS_GROUPS',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BoardGame',
            fields=[
                ('pieces', models.CharField(blank=True, db_column='Pieces', max_length=20, null=True)),
                ('game', models.ForeignKey(db_column='GAME_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='testSchema.Game')),
            ],
            options={
                'db_table': 'BOARD_GAME',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CardGame',
            fields=[
                ('cards_type', models.CharField(blank=True, db_column='Cards_type', max_length=20, null=True)),
                ('game', models.ForeignKey(db_column='GAME_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='testSchema.Game')),
            ],
            options={
                'db_table': 'CARD_GAME',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Instances',
            fields=[
                ('time', models.DateTimeField(db_column='Time')),
                ('date', models.DateField(db_column='Date')),
                ('instance_location', models.CharField(db_column='INSTANCE_Location', max_length=20)),
                ('instance', models.ForeignKey(db_column='INSTANCE_ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='instances_instance', serialize=False, to='testSchema.Group')),
            ],
            options={
                'db_table': 'INSTANCES',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PhysicalGame',
            fields=[
                ('physical_requirements', models.TextField(blank=True, db_column='Physical_requirements', null=True)),
                ('game', models.ForeignKey(db_column='GAME_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='testSchema.Game')),
            ],
            options={
                'db_table': 'PHYSICAL_GAME',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TabletopRpg',
            fields=[
                ('narrative_authority', models.CharField(blank=True, db_column='Narrative_authority', max_length=20, null=True)),
                ('settings', models.TextField(blank=True, db_column='Settings', null=True)),
                ('style_of_play', models.CharField(blank=True, db_column='Play_Style', max_length=20, null=True)),
                ('components', models.CharField(blank=True, db_column='Components', max_length=20, null=True)),
                ('game', models.ForeignKey(db_column='GAME_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='testSchema.Game')),
            ],
            options={
                'db_table': 'TABLETOP_RPG',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VideoGame',
            fields=[
                ('system_requirements', models.TextField(blank=True, db_column='System_requirements', null=True)),
                ('game', models.ForeignKey(db_column='GAME_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='testSchema.Game')),
            ],
            options={
                'db_table': 'VIDEO_GAME',
                'managed': False,
            },
        ),
    ]
